Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2013-12-09T23:23:14-02:00

====== 99 - Processo do Arrakis ======
Created segunda 09 dezembro 2013

Aqui vou explicar o processo de funcionamento do arrakis, com objetivo de ajudar o desenvolvedor, explico o fluxo do framework, explicando os pontos mais importantes.

**DICA**: Cuidado com a dependencia ciclica.
 

==== url.py - Porta de Entrada ====

A porta de entrada de uma aplicação no djago é o arquivo url.py, neste arquivo será feita a configuração das rotas do framework, ou seja, é definido para o processamento segue de acordo com a url.

No Arrakis, é tomado o controle deste arquivo, isso se dá através da seguinte alteração no url.py?:

	__from arrakis.system import urlsPatternConfig__
	__urlpatterns = urlsPatternConfig()__

Ou seja, a funão urlsPatternConfig() irá dizer ao django qual rota deverá ser tomada

===== urlsPatternConfig =====

Aqui já vemos o jeito de ser do Arrakis, o **urlsPatternConfig** pergunta para o sistema por plugins do tipo **"url" **que irão configurar o roteamento.

Note que os plugins responsável por configurar o roteamento são do tipo **urls**

O plugin padrão que processa o urlpatterns é se encontra no aplicativo:
	**urlManager**
que se encontra em:
	__/app/UrlManager/__init__.py__

Note que outros aplicativos podem precisar processar a url, por exemplo o ArrakisAdmin

Você pode executar o seguinte script para encontrar o plugin e o local do código fonte:
**[NÃO IMPLEMENTADO]**


====== UrlManager ======

O aplicativo responsável por tratar as urls requisitadas no navegador se chama **UrlManager**
E o processamento das urls é feita pelo método loadURL

No django a configuração das rotas se dá atráves de uma lista chamada urlpattern,  e nesta lista é especificado uma expressão regular que combine com a url passada e o nome da função que irá tratar essa url.

No [[UrlManager]] o urlPattern é modificado para que todas as urls sejam enviadas para a função arrakis.app.UrlManager.loadUrl

		**urlpatterns += patterns('',**
**                                url(r'^(?P<url>.*)$', 'arrakis.app.UrlManager.loadUrl')**
**        )**


====== Load Url ======
**/app/UrlManager/__init__.py**

No Arrakis temos um objeto especial que é usado por todo o framework, é um objeto central usado pelos plugins e recursos como meio de comunicação entre eles, além te guardar várias variaveis do framework, que são alterados pelos aplicativos.

Config Holder é um objeto global, é global pois é usado em praticamente todo framework, e para não precisar se passado nos parâmetros

[VER MAIS EM: CRIAR LINK AQUI]

Este objeto é criado e configurado através do Middleware 
	**ConfigHolderMiddleware**

E nele é armazenado o httpRequest, httpRespose, e outros objetos usados pelos plugins e recursos


No loadUrl vamos configurar um paramêtro nesse objeto chamado: **"url"**

No arrakis, a urls são consumidas pelos plugins, esse gerenciamento é feito pelo ConfigHolder.

No loadUrl passamos para o [[ConfigHolder]] qual url foi requisitada pelo navegador.

===== Stages =====

O processamento de url no django segue uma ordem definida peloas estágios, os estágios existentes são:

		self.stage = [
			"pre_config",
			"config",
			"pos_config",
			"pre_display",
			"display",
			"pos_display"
		]


O loadUrl agora irá pedir para o sistema todos os plugins que processam url e será feito na seguinte ordem:

pre_config:tratarUrl
config:tratarUrl
pos_config:tratarUrl
pre_display:tratarUrl
display:tratarUrl
pos_display:tratarUrl

Então, ao criar seu aplicativo, caso deseje que ele responda a uma requisiçao no navegador, você deve criar um plugin que resposta a uma dessas requisições de plugins desejadas

No final é feita uma verificação se algum conteudo foi fornecido pelos plugins, caso não, ele irá exibir na tela um texto "URL Não processada"

No futuro será feita uma requisição para um plugin que forneça um view de erro 404

====== Bola pra frente ======

A partir daqui o processo é feito dentro de cada aplicativo que requisitou determinado plugin.
