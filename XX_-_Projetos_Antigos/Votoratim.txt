Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2016-11-06T21:35:26-02:00

====== Votoratim ======
Created domingo 06 novembro 2016

* Levantar trabalhos manuais, normalmente operado por um colaborador menos especializado através de software


====== APAGAR ======

[  ] Objeto do projeto é o desenvolvimento de uma extensão para Mozilla Firefox, que deverá automatizar o processo de upload de arquivos em sistema web para advogados.
[  ]  A SMARTI irá mapear o conjunto de instruções necessárias para atender os requisitos de 3 sistemas de tribunais inicialmente: pJe, Projudi, Escritório Digital.
[  ]  A SMARTI ficará responsável em desenvolver a estrutura de instruções e o formato que as mesmas devem ser passadas ao FrontEnd.
[  ]  O software será homologado com os 3 sistemas acima citados.
O Projeto será desenvolvido em etapas ordenados por complexidade e risco.
Será composto por 3 telas (interfaces):
[  ]  Barra Lateral (Sidebar);
[  ]  Tela Principal (Gerenciamento de Arquivo);
[  ]  Configuração de Tela.



**Requisitos:**
[  ]  Disponível para download na loja virtual do Mozilla;
[  ]  Modo de Instalação/Desinstalação;
[  ]  Botão de acesso ao aplicativo através de botão com logo na barra de ferramenta, carregando a barra lateral;
[  ]  Comunicação com Backend será feito através de um WebService REST em JSON;
[  ]   Reagir a possíveis erros retornados pelo BackEnd (falha de autenticação, não há conexãocom internet
[  ] Deve ser multi-plataforma: Linux, Windows e Mac
[  ]  Extensão deve entrar na loja do Mozilla Firefox

**Projeto**

**Interpretador e Execução de Instruções**

Após carregar, configurar os arquivos para upload e clicar em executar, o aplicativo irá iniciar processo de upload automático na página atual em que o usuário está acessando. Esta execução consiste em iniciar um robô que irá simular as ações do usuário realizando o upload do arquivo. Como as páginas podem alterar com frequência, o aplicativo irá constantemente consultar ao backend para obter as instruções de como automatizar o upload em determinada página, isso será feito através de um interpretador de instrução:

[  ] O interpretador vai carregar uma lista de instruções e executá-las em sequência;
[  ] Deve validar cada passo, e caso algum falhe, retornar esta informação para o backend para que corrijam o problema;
[  ] Deverá existir um detector de página que irá identificar qual página está sendo acessado, essa informação também deve ser atualizada frequentemente com o backend;
[  ] Caso o sistema do judiciário caía, a tarefa deve continuar de onde ela parou. Ou seja, o andamento do processo de anexação deve ser salvo para este poder continuar do ponto que parou. A continuação do processo deve ser autorizada pelo usuário;
[  ] O sistema precisa detectar se o cliente está trabalhando com o mesmo processo. (Cada detector da página deve ser capaz de recuperar o número do processo);
[  ] Há vários sistemas em que múltiplos arquivos podem ser carregados/selecionados ao mesmo tempo. É preciso dar suporte a isso monitorando quais arquivos já foram incorporados e quais ainda faltam. Essa leitura da página em execução é importante para recuperar trabalhos deixados pela metade caso haja algum problema de conexão. Um humano iria verificar qual o último arquivo anexado e continuar de onde parou. Nossa ferramenta precisa fazer a mesma coisa;
[  ] A automação será implementada através de Java script embutido na página;

[  ] Sistema deve estar preparado para criações de novos módulos no futuro. Criar flag de estado, ex: sistema está realizando upload.

**Gerenciamentode Arquivo para Upload**

[  ] Ao clicar no botão iniciar, será carregado um novo painel para gerenciar os arquivos de upload:
[  ] Barra lateral irá retrair e exibir apenas a nova tela de upload (tela principal);
[  ] Múltipla seleção de arquivos ou mesmo seleção dos .pdf de uma pasta inteira;
[  ]  Checa consistência dos arquivos: formatação, tamanho máximo, etc. o Formatação será feita por um executável externo.
[  ] Segmenta documentos respeitando tamanhos e formatações exigidas por cada tribunal (XML específico contém esta informação);
[  ] Alguns sistemas o usuário precisa fazer upload do arquivo já assinado digitalmente. Isso exigiria dar o split no arquivo, pedir para o usuário manualmente assinar seus documentos, e depois pedir para o usuário selecionar novamente um documento. O que eu vi acontecer é que o .pdf vira .pdf.p7s ... logo damos update no path de todos os outros;
[  ] Assinatura será feita pelo usuário, o aplicativo deve abrir a pasta onde estão os arquivos através do gerenciador de arquivo;
[  ] Valida se existem erros na segmentação dos arquivos: arquivos corrompidos, muito grandes, inacessíveis, etc.
[  ] Solicita classificação por parte do usuário, e esta classificação deve ser rápida e simples. Preferencialmente classificando múltiplos arquivos ao mesmo tempo, buscando sugerir classificações com dicas do nome do arquivo. Caso a classificação seja “outro” ... o usuário pode inserir um texto, mas o default é o próprio nome do arquivo.
[  ]  Será possível ordenar os arquivos.

Checa consistência da tarefa:
[  ] Não há nada para anexar;
[  ] Faltam campos a serem preenchidos;
[  ] Erros de verificação de consistência do XML instrutor;
[  ] Usuário não classificou algum documento.
[  ] Deve haver informação do usuário “logado”;
[  ] Caso ocorra algum problema no processo do upload, o aplicativo deve ser capaz de saber onde foi o problema.
[  ] Isso será feito analisando a página e carregando a lista de arquivos já carregado.

**Autenticação e Autorização**
[  ]  Para utilizar o sistema o usuário deverá estar “logado”;
[  ]  Autenticação por Token:
	o Cliente recebe chave que será utilizada em todas as requisições.
	o Chave terá período de expiração
[  ]  Haverá um controle de autorização através de níveis de acesso e créditos disponíveis.
[  ]  Toda operação de upload irá descontar créditos, caso chegue a zero o usuário não terá permissão para realizar uploads;
[  ] Para toda atividade no aplicativo existirá uma validação de permissão;
[  ] Haverá uma função de recuperação de senha, ao clicar em esqueci minha senha, será enviada uma requisição ao backend para enviar instruções de recuperação por e-mail;
[  ] LOGIN SERÁ FEITO NA BARRA LATERAL.

**Validação**
[  ] Valida se houve alteração na página, caso positivo, enviar alerta para o backend;
[  ] Valida se os arquivos estão prontos para upload. (Exibir botão executar visível, mas desabilitado);
[  ] Valida compatibilidade das versões do browser e inclusive se o tribunal aceitar estas versões.

**Monitoramento**

[  ]  Rodar em background quando o browser iniciar. Ele irá monitorar:
	 [  ]  Se o usuário entrou em algum site do tribunal (mostrar o botão da extensão com nosso logo);
	 [  ]  Se o usuário entrou na página de upload (mostrar barra lateral com informações);
 [  ]  Monitoramento de Atividade:
	 [  ]  Toda tarefa que usuário executar no aplicativo será reportado para o backend.

**Atualização Dinâmica**

Com objetivo de evitar atualização frequente da extensão, alguns comportamentos e configurações do aplicativo serão atualizados dinamicamente através de uma comunicação frequente com o backend:

[  ]   Sistemas suportado pela ferramenta:
	 [  ]  Se houver algum problema com um dos sistemas, podemos informar o usuário antes dele tentar usar nossa ferramenta em vão;
 [  ] Atualização do mecanismo de Detecção (Ver Detecção de Página);
 [  ] Atualização de instrução de execução (ver interpretador e Execução de Instruções);
 [  ] Atualização de informação de Validação de Documento.


**Configuração**

[  ] Na interface de configuração será possível definir o formato que os arquivos terão ao ser feito upload:
	[  ]  Ex: renomear o nome do arquivo (contrato_001) ou contrato_01_02_03;
[  ] Acesso a configuração será feito através de um botão com ícone engrenagem na barra lateral ou na tela principal;
[  ] Configuração será salva no Servidor;
[  ] Os arquivos anexados são de fato salvos quando o usuário faz upload e aperta salvar. Quando aperta salvar a página atualiza e pode até sair para a home. Caso o sistema caia, os arquivos salvos até o botão salvar estar pressionados estarão garantidos. Por isso, quando a conexão estiver muito instável, a frequência com que o sistema aperta o salvar deverá aumentar para ir forçando arquivos para dentro.

**Verificação de Nova Versão**

[  ]  Verificar com o Backend se existe algum update mais recente da Extensão. Caso exista pede autorização ao usuário para atualizar usando a própria loja de extensões do Mozilla.

**Suporte ao Cliente**

 [  ]  Haverá um link que redireciona-rá o cliente para o site do aplicativo.

**Estatística**

 [  ] Será exibido uma barra lateral com estatística de uso do aplicativo;
 [  ] Esta informação será enviada e já processada pelo Backend.

	
