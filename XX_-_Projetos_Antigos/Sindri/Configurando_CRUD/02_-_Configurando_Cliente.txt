Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2015-02-15T17:09:43-02:00

====== 02 - Configurando Cliente ======
Created domingo 15 fevereiro 2015


====== Definindo Modelo ======


Primeira coisa a fazer ao configurar um crud é definir um modelo, normalmente ele é pareciso com o modelo no servidor, então podemos contruir de forma similar:

O local onde devemos espeficiar o modelo é:

	**/apps/<<NOME_DA _APLICAÇÃO>>/client/models/<<NOME_DO_MODELO>>.js**

Por exemplo vamos criar o modelo **usuário** na aplicação **acesso:**

	**apps/Acesso/client/models/usuario.js**

Modelo deve seguir a seguinte sintaxe:

{{{code: lang="js" linenumbers="true"
/**
 * Created by andre on 07/12/14.
 */
var SindriClientModel = require('sindri/lib/client-model');


var UsuarioModel = SindriClientModel.extend({

	urlRoot: '/usuario',

	url: 'usuario',

	schema: {

		id: {
			title: '#ID',
		},

		login: {
			unique: true,
			size: 255,
			validation: {
				msg: "Login é obrigatório"
			}

		},

		senha: {
			size: 255,
			select: false
		},

		email: {
			title: "E-mail",
			size: 255,
			unique: true

		},

		administrador: {
			def: false
		},

		status: {
			def: 0,
			enu: {
				0: "Inativo",
				1: "Ativo",
				2: "Removido"
			}
		},

		dataCadastro: {
			title: "Cadastrado em",
			type: "datetime",
			insert: false,
			update: false
		}
	}

});

module.exports = UsuarioModel;
}}}


Aqui devemos especificar parâmetros pertinente ao modelo e não ao formulário ou datagrid, são parâmetros que podem ser compartilhados e usados em inumeros locais como:

* Crud -> Form
* [[Crud]] -> Grid
* Views em Páginas
* Outras construções personalizadas

__TODO: Clique aqui para ter uma referência dos parâmetros permitidos__

Modelo deve ser uma classe filha de  
	**sindri/lib/client-model**
	


====== Definindo Crud - Formulário ======

Crud é uma View do Marionette.js (http://marionettejs.com/)

Ao instanciar, precisamos atribuir pelo menos dois parâmetros: **grid** e **form. **Ambos são funções que devem retornar uma instacia de 
	* **Backbone.forms (**https://github.com/powmedia/backbone-forms)
	* **Backgrid (**http://backgridjs.com/)

Por sorte já temos uma ferramenta q gera esses componente para a gente:

**FormGenerator** e **GridGenerator**

Portanto, podemos configurar um CRUD da seguinte forma:

{{{code: lang="js" linenumbers="true"
/**
 * Created by andre on 18/01/15.
 */
"use strict";

var Crud = require('sindri-crud'),
	PerfilModel = require('../models/perfil'),
	GridGenerator = require('sindri-crud/lib/gridGenerator'),
	FormGenerator = require('sindri-crud/lib/formGenerator');

module.exports = function (adminManager) {

	return function () {


		//////////////////////////////////////////
		// Gerador de Formulário
		//////////////////////////////////////////
		var Form = FormGenerator.getGenerator({}, PerfilModel);


		//////////////////////////////////////////
		// Gerador de Grid
		//////////////////////////////////////////
		var Grid = GridGenerator.getGenerator({}, PerfilModel);


		//////////////////////////////////////////
		// Crud
		//////////////////////////////////////////
		var perfilCrud = new Crud({
			form: Form,
			grid: Grid
		});


		adminManager.mainRegion.show(perfilCrud.getView());


	}

}


}}}


__TODO: Criar refêrencia de opções do Crud__

Para configurar um formulário devemos usar o comando:
	FormGenerator.getGenerator(<<OPÇÔES>>, <<MODELO>>);
	
* **Opções** é uma lista de atributos para personalizarmos nosso formulário,
* **Modelo **é nosso modelo visto na tópico anterior, o formulário será gerado baseado no modelo padrão.


====== Definindo Crud - Backgrid ======

