Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2024-04-12T02:34:33-03:00

====== 030 - Sistema da Plataforma v1 ======
Criado sexta 12 abril 2024

Aqui vou descrever o projeto  do sistema que vai gerenciar o Crontech Platform, descreve os seguintes modulos:

* Gestão de Contas (Account)
* Gestão de Tenant (WhiteLabel / Revenda)
* Controle de usuários
* Modulos de automação

====== 01 - Contas (account) ======

* Vamos ter 3 componentes principais para gerenciar a plataforma ao nível macro:
	* Contas (Account/Client)
	* Tenant (Revenda/WhiteLabel)
	* User (Usuários)

* A idéia é iniciar o projeto pensando no conceito de revenda, ou whitelabel, ou seja podemos ter revendedores dos serviços
* Primeiro contato com o sistema é através de contas, quando um novo cliente entra em contato, ele terá uma nova conta
* O Controle financeiro, gastos, limites, será feito para determinada conta
* Teremos uma conta master inicial chamada crontech
* Cada conta é associada a um tenant obrigatóriamente, tenant são como visões de acesso a plataforma, ele terá seu proprio dominio, seu proporio layout (mais abaixo)
* cada conta é associada a um usuário obrigatóriamente, que será o usuário **DONO** da conta, que será criado ao criar uma nova conta (ou associado se esse usuario já existir)
* usuario só poderá acessar sua conta através do tenant especificado, ou na prática, através do dominio daquele tenant
* A conta não poderá alterar seu proprio tenant ou seu proprio usuário dono
* Mas a conta poderá alterar alguns atributos do seu tenant, como LOGO, descrição, cor. (definir permissões para cada caso)
* Toda conta terá uma conta dona (ou pai), exceto a conta master (crontech)
* as contas terão alguns papéis principals descrito abaixo:

===== Tenant Admin Role =====
* Uma conta do tipo **Tenant Admin**, poderá criar e gerenciar tenant
* Os tenant criados são para subcontas e não pode ser usado pela própria conta
* Tenant tem necessáriamente um dominio vinculado.

===== Account Admin Role =====
* Uma conta do tipo Account Admin pode criar novas contas
* Toda conta criada terá um account owner que será quem a criou
* É possivel selecionar o tenant da conta, pode ser tenant do dono da conta (quem criou) ou um tenant criado anteriormente.
	* Exemplo: Você cria uma nova subconta, um novo usário, um novo tenant e vincula todos a nova subconta
* **Subaccount Admin Role:** Permite criar contas que também é uma **Account Admin**
* **Subaccount Tenant  Role:** Permite criar contas que são **Tenant Admin Role**

===== User Admin Role =====
* Uma conta do tipo **user admin** **,** pode criar e vincular usuário a sua conta
* Pode Criar grupos/perfis e permissões para diversos aspecto do sistema e vincular a um usuário

===== Automation Manager Role =====
* Contas com este tipo, pode criar e gerenciar automações
* Poderiamos ter contas apenas para gerenciar subcontas (revendedores)

====== 02 Tenant ======
* No tenant é configurado LOGO, cores, definição de layout e outras opções diversas
* Toda conta tem um tenant associado
* Todo tenant tem uma conta dona (que normalmente é a conta pai da conta associada)
* Ao acesso o **dominio da tenant**, automaticamente será identificado a tenant e apenas usuários com acesso a este tenant terão acesso liberado na autenticação

====== 03 Usuários ======
* Usuários não tem donos, cada usuário é dono do seu próprio usuário
* Ou seja conta é global no nível de plataforma
* Uma conta pode criar uma nova conta como atalho e permitir que este usuario acesse sua conta
* Uma conta não pode remover nenhum usuário, apenas revogar acesso a sua conta
* Autenticação, grupos e roles é gerenciado pelo Keycloak

====== 04 Groups and Role (Perfis e Permissões) ======
* Gerencia grupos e usuários para acessar diferentes aspectos do sistema
* Apenas gurpo podem ser associado a usuário
* Também existirão grupos pré definidos com permissões mais comuns para ser utilizado


====== 04 Módulo de Segurança ======
* Precisamos implementar algum módulo no API GATEWAY que valida se nenhum vazamento de dado ocorre de outros usuários, todo acesso tem q estar vinculado a uma conta
* Estudar uso do Kong em vez do Trafik, traefik pareceu amarrado/complexo para middeware
* Será validado junto como autenticação e autenticação
* Todo recurso deve ter uma conta vinculada


====== 04  Módulos principais da Plataforma ======

===== Service =====
* São serviços PASSIVOS no ambiente kubernete, normalmente uma API, que é consumida pelos processos de automação
* Precisa existir um outro microserviço para controlar os limites de acesso, autorização logs entre outros 
* Exemplo: Consome API do mercado livre
* Necessário ter um agent que gerencia o serviço, coletando dados de uma fila (RabbitMQ) para não congestionar
* Escalonar
* POdem ser serviços que salvam no banco de dados especifico, executam alguma ação e retorna resultad

===== Automations =====
* São processos de automação que irá utilizar os serviços para coleta de dados ou processamento
* Fará uso de filas (rabbitMQ) para gerenciar as trocas de mensagem
* Faz a orquestração de tarefas
* Cada automação podem ser recorrente (periodicas) com agendamento
* Podem ser contante (ou seja sempre em execução)
* Executada por trigger, exemplo um novo SMS
* Temos diversos tipos de automações:

**NodeRed**
* Podemos criar processos com o node-red, 

**MicroServiço**
* Outros serviços que são executados via jobs do kubernetes

**Pré Configurados**
* São processos padrões pré configurado q apenas recebem parâmetros:
	* Por exemplo: Coletar dados de uma API e salvar em um banco de dados

===== RPA =====
* Um tipo despecifico de automação que fará acesso a Workers rodando em maquinas windows
* Para ao futuro necessário toda uma gestão de workes
* Verificar openRPA q já tem orquestração
* 99% dos casos é resolvido com crawler

===== Triggers =====
* Podem ser iniciados à partir de uma mensagem sms
* podem ser iniciado à partir de novos registros em uma fila RabbitMQ

====== Integrações ======

* Apify
* [[zapier.com]]
* [[make.com]]
* https://rapidapi.com/collection/top-scraper-api-tools


====== 05. WEB UI - Interface de Monitoramento ======

* Teremos uma interface master q é configurada de acordo com cada tenant
* ou podemos ter interfaces independentes exclusiva de um cliente
* VUE3/NUXT3
* Deve monitorar progresso das automações
* Gestão de logs e erros
* Verficar outras ferramentas q fazem isso como prometeus ou outros
* Na listagem de automação teremos nome da automação, client, e owner
	* Porém a conta nunca deve saber quem é seu próprio dono explicitamente, deve ser ocultados, apenas na listagem do dono exibe essa coluna (para casos de subdonos)



===== ChatGPT ANALISE =====

* Analise meu novo projeto
* Sugira sugestões relavantes para melhoria do projeto
* Verifique se já existem soluções prontas e me sugira, seja para o projeto como um todo ou para algum pedaço especifico
* Aponte possiveis erros
* Aponte melhorias
* Me avise se tem arquitetura melhor para o objetivo do projeto
