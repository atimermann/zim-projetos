Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2024-01-11T15:19:50-03:00

====== Sprint 01 ======
Criado quinta 11 janeiro 2024

[*] **[15:35]** Enviar Texto para MinIO (UI) - Formulário Simples (FRONT)
[*] **[18:18]** (BACK) - API para receber texto e salvar no Minio
[*] **[Dia 2: 16:49]** Criar Schedule em Kubernetes para disparar o TextLoader
[*] **[Dia 3 20:01]** Implementar o TextLoader que carrega novos arquivo texto no minio e salva no Fila para processamento

[*] **[Dia 4: 16:50]** Criar o Summarizer Worker que lê da fila e envia para BentoMl par aprocessamento
	* Lembrando que na primeira execução pode ocorrer timeOutr tratar
	* Salva na fila para processamento
[*] **[Dia 4 19:32]** Criar um PDF Generator q lê da fila os textos e gera PDF com PDF Kit e salva no minio o novo PDF, utilizar PDFKIT
[*] Criar imagem docker para UI e MAIN
[ ] Implementar validação de segurança para todas as API usando keycloak

* Documentar e revisar direitinha como salvar o certificado localmente para funcionar no k3s local e reconhecer registro privado
- executar ncli-agtm-update antes do build

--------------------
[*] DOCUMENTAR RABBITMQ no zim
[*] criar script automatico para port-forward

[ ] adicionar classe base AMQP e MINIO no Node Framework, ou por no util e carregar no node-framework, serião serviços pré-definidos

[ ] Remover .env da imagem deve ser configurado por configMap ou secrets


--------------------
ADICIONAR NO **agtm/util,** documentar no todo, tipagem
function printErrorDetails (error) {
  // Primeiro, imprime o erro usando console.error para obter o stack trace e a mensagem padrão
  console.error(error)

  // Em seguida, obtém todas as propriedades do erro, incluindo as não enumeráveis
  const properties = Object.getOwnPropertyNames(error)

  // Imprime cada propriedade e seu valor
  properties.forEach(prop => {
	console.log(`${prop}: ${error[prop]}`)
  })
}
