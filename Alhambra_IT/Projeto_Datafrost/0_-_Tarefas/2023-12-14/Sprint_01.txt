Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2024-01-11T15:19:50-03:00

====== Sprint 01 ======
Criado quinta 11 janeiro 2024

[*] **[15:35]** Enviar Texto para MinIO (UI) - Formulário Simples (FRONT)
[*] **[18:18]** (BACK) - API para receber texto e salvar no Minio
[*] **[Dia 2: 16:49]** Criar Schedule em Kubernetes para disparar o TextLoader
[*] **[Dia 3 20:01]** Implementar o TextLoader que carrega novos arquivo texto no minio e salva no Fila para processamento

[*] **[Dia 4: 16:50]** Criar o Summarizer Worker que lê da fila e envia para BentoMl par aprocessamento
	* Lembrando que na primeira execução pode ocorrer timeOutr tratar
	* Salva na fila para processamento
[*] **[Dia 4 19:32]** Criar um PDF Generator q lê da fila os textos e gera PDF com PDF Kit e salva no minio o novo PDF, utilizar PDFKIT
[*] Criar imagem docker para UI e MAIN

[*] Configurar imagens
[*] Configurar serviços K8S Dev
[ ] Configurar serviços K8S Homol
[ ] Documentar atividades em formato apresentação
[ ] Melhorar Frontend


[ ] Implementar validação de segurança para todas as API usando keycloak


--------------------

* Documentar e revisar direitinha como salvar o certificado localmente para funcionar no k3s local e reconhecer registro privado
- executar ncli-agtm-update antes do build

--------------------
[*] DOCUMENTAR RABBITMQ no zim
[*] criar script automatico para port-forward

[ ] adicionar classe base AMQP e MINIO no Node Framework, ou por no util e carregar no node-framework, serião serviços pré-definidos

[*] Remover .env da imagem deve ser configurado por configMap ou secrets
[ ] Imprimir versão do projeto no job também e outras informões importate
[ ] Alterar node-framework para criar pasta storage na inicialização caso não exista
[ ] Ao executar jobs direto não pré carregar todos os jobs (por padrão ele pré instancia  todos os controlers

--------------------
ADICIONAR NO **agtm/util,** documentar no todo, tipagem
function printErrorDetails (error) {
  // Primeiro, imprime o erro usando console.error para obter o stack trace e a mensagem padrão
  console.error(error)

  // Em seguida, obtém todas as propriedades do erro, incluindo as não enumeráveis
  const properties = Object.getOwnPropertyNames(error)

  // Imprime cada propriedade e seu valor
  properties.forEach(prop => {
	console.log(`${prop}: ${error[prop]}`)
  })
}

--------------------
**Como Testar Container**
docker run -it registry.datafrost-cic.idc:5000/datafrost-node:dev npm start

**Como Testar POD:**
kubectl exec -it pod/postgres-68d794b445-jfnk9 -n datafrost -- [[/bin/bash]]

@agtm/packages/nuxt-layer-adminlite-primeface
- Atualização documentação
- Nova definição de runTimeConfig

--------------------
Documentar Variaveis de ambiente em NUXT em produção

npm run build
node [[./output/server/index.mjs]]

**Definir runtimeConfig no nuxt.config.ts**
  runtimeConfig: {
	public: {
	  template: {
		version: packageJSON.version
	  },
	  /**
	   * Chave de licenciamento do Digitalizador online dynamsoft Webtwain
	   */
	  dynamsoftWebtwainProductKey: '',
	  /**
	   * Server Config
	   */
	  server: {
		protocol: '',
		hostname: '',
		port: '',
		apibaseurl: ''
	  }
	}
  }

**IMPORTANTE:** 
* process.env não funciona
* arquivo .env será ignorado carregar manualmente
* Prefixar com NUXT_
* Toda variavel de ambiente deve ser em maiusculo
* NUXT_PUBLIC_TEMPLATE_VERSION
	* irá subtituir config.public.template.version
	* ou config.public.templateVersion
	* ou qualquer combinação dos dois
* 

**Exemplos:**
 para acessar a configuração acima faça:

NUXT_PUBLIC_SERVER_PROTOCOL='http' node .output/server/index.mjs

NUXT_PUBLIC_DYNAMSOFT_WEBTWAIN_PRODUCT_KEY='http' node .output/server/index.mjs

**NO CÒDIGO:**

import { useRuntimeConfig } from '#imports' // Caso auto-imports estiver desativado

const config = useRuntimeConfig()
console.log(JSON.stringify(config.public, undefined, ' '))








10.42.0.240:3001

